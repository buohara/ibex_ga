C++ Style Guide for Ibex GA Coprocessor Project
===============================================

This document outlines the C++ coding conventions used in this project.

NAMING CONVENTIONS
-----------------
- Classes: PascalCase (e.g., GATestVectorGenerator)
- Functions/Methods: camelCase (e.g., generateTestSuite, randomMultivector)
- Variables: camelCase (e.g., testCount, inputFile)
- Constants/Enums: SCREAMING_SNAKE_CASE (e.g., GA_FUNCT_ADD, GA_FUNCT_SUB)
- Private members: camelCase with no prefix (e.g., rng, uniformDist)

FORMATTING
----------
- Indentation: 4 spaces (no tabs)
- Braces: Opening brace on new line for everything (functions, classes, if, for, while, switch, etc.)
- Line length: Prefer 80-100 characters when practical
- Spacing: Space after keywords (if, for, while), around operators

LANGUAGE FEATURES
----------------
- Prefer explicit types over 'auto' for clarity
- Use 'using namespace std;' at file scope when appropriate
- Prefer C-style I/O (FILE*, printf, fprintf) over C++ streams for simple cases
- Use const references for function parameters when objects won't be modified
- Initialize member variables in constructor initializer lists

COMMENTS
--------
- NO inline comments (no // comments on same line as code)
- Use JavaDoc style comments for functions/methods only:
  /**
   * Brief description of what the function does
   * @param paramName Description of parameter
   * @return Description of return value
   */
- Document complex algorithms and GA-specific operations in separate comment blocks
- Explain GA mathematical concepts where non-obvious using block comments above code

INCLUDES
--------
- System headers first, then project headers
- Use angle brackets for system includes: #include <iostream>
- Use quotes for project includes: #include "local_header.h"
- Group related includes together

MEMORY MANAGEMENT
----------------
- Prefer stack allocation when possible
- Use RAII principles for resource management
- Close files explicitly with fclose() when using C-style I/O
- Avoid raw pointers except for C-style APIs

GA-SPECIFIC CONVENTIONS
----------------------
- Use Versor library types explicitly (Scalar, Vec, Biv, etc.)
- Document geometric algebra operations with mathematical context in block comments
- Use meaningful variable names for geometric objects (rotor, translator, etc.)
- Include block comments explaining CGA geometric significance

ERROR HANDLING
--------------
- Check return values from file operations
- Use early returns for error conditions
- Print clear error messages using printf
- Prefer simple error handling over exceptions for this project

EXAMPLE FORMATTING:
------------------
class GATestVectorGenerator 
{
private:
    mt19937 rng;
    uniform_real_distribution<float> uniformDist;
    
public:
    GATestVectorGenerator() : 
        rng(random_device{}()),
        uniformDist(-100.0f, 100.0f) 
    {
    }
    
    /**
     * Generate random CGA multivector for testing
     * @return Random multivector with mixed-grade elements
     */
    Multivector<float> randomMultivector() 
    {
        Scalar scalarPart = Scalar(uniformDist(rng));
        Vec vectorPart = Vec(uniformDist(rng), uniformDist(rng), uniformDist(rng));
        return scalarPart + vectorPart;
    }
    
    /**
     * Process test cases based on operation type
     * @param op The GA operation to perform
     * @param testData Input data for processing
     */
    void processTestCase(GAFunction op, const TestData& testData)
    {
        switch (op)
        {
            case GA_FUNCT_ADD:
                break;
            default:
                break;
        }
        
        for (int i = 0; i < count; ++i)
        {
            if (condition)
            {
                processItem(i);
            }
        }
    }
};

This style guide reflects the conventions used in the GA coprocessor test generation code.